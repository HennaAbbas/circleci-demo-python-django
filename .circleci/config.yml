version: 2.1
orbs:
  python: circleci/python@1.5.0
  heroku: circleci/heroku@1.2.6
  browser-tools: circleci/browser-tools@1.4.1  
  
commands:
  update-submodules:
    steps:
      - run:
          name: "Update Submodules"
          command: |
            git submodule sync --recursive
            git submodule update --init --recursive

#   pre-steps:
#     steps:
#       - checkout
#       - update-submodules
#       - run:
#           name: "Setup Environment"
#           command: |
#             # Calculate ccache key.
#             git show -s --format=%cd --date="format:%Y%m%d" $(git merge-base origin/main HEAD) | tee merge-base-date

#             # Set up xml gtest output. 
#             mkdir -p /tmp/test_xml_output/
#             echo "export XML_OUTPUT_FILE=\"/tmp/test_xml_output/\"" >> $BASH_ENV

#             # Set up ccache configs.
#             mkdir -p .ccache
#             echo "export CCACHE_DIR=$(realpath .ccache)" >> $BASH_ENV
#             ccache -sz -M 5Gi
#             source /opt/rh/gcc-toolset-9/enable
#       - restore_cache:
#           name: "Restore CCache Cache"
#           keys:
#             - velox-ccache-debug-{{ arch }}-{{ checksum "merge-base-date" }}

#   post-steps:
#     steps:
#       - save_cache:
#           name: "Save CCache Cache"
#           key: velox-ccache-debug-{{ arch }}-{{ checksum "merge-base-date" }}
#           paths:
#             - .ccache/
#       - store_artifacts:
#           path: '_build/debug/.ninja_log'
#       - store_test_results:
#           path: '/tmp/test_xml_output/'  
  
jobs:
  build_and_test: # this can be any name you choose
    docker:
      - image: cimg/python:3.10.1
        environment:
          DATABASE_URL: postgresql://root@localhost/circle_test?sslmode=disable
      - image: circleci/postgres:9.6.2
        environment:
          POSTGRES_USER: root
          POSTGRES_DB: circle_test
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pipenv
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - run:
          command: |
            google-chrome --version
            chromedriver --version
          name: Check install          
#       - run:
#           name: Run tests
#           command: pipenv run python manage.py test # alternatively run `python -m pytest` if you are running vanilla pytest
      - run:
          name: chmod webdrivers
          command: chmod +x /home/circleci/.webdrivers/chromedriver          
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results
          destination: tr1
      - persist_to_workspace:
          root: ~/project
          paths:
            - .
                     
  test: # this can be any name you choose
    docker:
      - image: cimg/python:3.10.1
    steps:
      - run: echo "hello world"



  deploy: # this can be any name you choose
    docker:
      - image: cimg/python:3.10.1
    steps:
      - attach_workspace:
          at: ~/project
      - heroku/deploy-via-git: 
          force: true # force push when pushing to the heroku remote, see: https://devcenter.heroku.com/articles/git      



workflows:
  on_commit:
    jobs:
      - build_and_test
      - test: 
          requires:
            - build_and_test            
      - deploy: 
          requires:
            - test  
      # Follow instructions here to authenticate git for Heroku: https://devcenter.heroku.com/articles/git#http-git-authentication
      # The following code may be uncommented, onnce HEROKU_API_KEY & HEROKU_APP_NAME environemnt variables are present
      # Read more: https://circleci.com/docs/2.0/env-vars/
      # - deploy:
      #     requires:
      #       - build_and_test # only deploy if the build_and_test job has completed
      #     filters:
      #       branches:
      #         only: master # only deploy when on main/master


      # Follow instructions here to authenticate git for Heroku: https://devcenter.heroku.com/articles/git#http-git-authentication
      # The following code may be uncommented, onnce HEROKU_API_KEY & HEROKU_APP_NAME environemnt variables are present
      # Read more: https://circleci.com/docs/2.0/env-vars/
      # - deploy:
      #     requires:
      #       - build_and_test # only deploy if the build_and_test job has completed
      #     filters:
      #       branches:
      #         only: master # only deploy when on main/master


